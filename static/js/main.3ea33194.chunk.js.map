{"version":3,"sources":["components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["TaskList","props","tasks","map","task","react_default","a","createElement","key","id","className","text","App","state","addTask","_this","length","concat","setState","prevState","Object","toConsumableArray","removeTask","pop","clearTasks","onClick","this","src_components_TaskList","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAYeA,SATE,SAACC,GACd,IAAMC,EAAQD,EAAMC,MAAMC,IAAI,SAAAC,GAAI,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKK,GAAIC,UAAU,mBAAmBN,EAAKO,QAC1F,OACIN,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cACTR,KC6CEU,oNA/CXC,MAAQ,CACJX,MAAO,MAGXY,QAAU,WAAM,IACPZ,EAASa,EAAKF,MAAdX,MACCE,EAAO,CACTK,GAAIP,EAAMc,OAAS,EACnBL,KAAI,gBAAAM,OAAkBf,EAAMc,OAAS,IAEzCD,EAAKG,SAAS,SAAAC,GAAS,MAAK,CACxBjB,MAAK,GAAAe,OAAAG,OAAAC,EAAA,EAAAD,CAAMD,EAAUjB,OAAhB,CAAuBE,UAKpCkB,WAAa,WACT,IAAIpB,EAAKkB,OAAAC,EAAA,EAAAD,CAAOL,EAAKF,MAAMX,OAC3BA,EAAMqB,MACNR,EAAKG,SAAS,CACVhB,aAIRsB,WAAa,WACT,IAAItB,EAAKkB,OAAAC,EAAA,EAAAD,CAAOL,EAAKF,MAAMX,OAC3BA,EAAMc,OAAS,EACfD,EAAKG,SAAS,CACVhB,mFAKJ,OACIG,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACXL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aAAd,gCACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAW,eACZL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,kBAAkBe,QAASC,KAAKZ,SAAlD,OACAT,EAAAC,EAAAC,cAAA,UAAQG,UAAU,qBAAqBe,QAASC,KAAKJ,YAArD,UACAjB,EAAAC,EAAAC,cAAA,UAAQG,UAAU,oBAAoBe,QAASC,KAAKF,YAApD,UAEJnB,EAAAC,EAAAC,cAACoB,EAAD,CAAUjB,UAAU,YAAYR,MAAOwB,KAAKb,MAAMX,gBA1ChD0B,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3ea33194.chunk.js","sourcesContent":["import React from 'react';\nimport './TaskList.css';\n\nconst TaskList = (props) => {\n    const tasks = props.tasks.map(task => <li key={task.id} className=\"tasks_list-item\">{task.text}</li>);\n    return (\n        <ul className=\"tasks_list\">\n            {tasks}\n        </ul>\n    );\n};\n\nexport default TaskList;","import React from 'react';\nimport TaskList from './TaskList';\nimport './App.css';\n\nclass App extends React.Component {\n    state = {\n        tasks: []\n    };\n\n    addTask = () => {\n        let {tasks} = this.state;\n        const task = {\n            id: tasks.length + 1,\n            text: `Task number  ${tasks.length + 1}`\n        };\n        this.setState(prevState => ({\n            tasks: [...prevState.tasks, task]\n        }));\n    };\n    tasks;\n\n    removeTask = () => {\n        let tasks = [...this.state.tasks];\n        tasks.pop();\n        this.setState({\n            tasks\n        })\n    };\n\n    clearTasks = () => {\n        let tasks = [...this.state.tasks];\n        tasks.length = 0;\n        this.setState({\n            tasks\n        })\n    };\n\n    render() {\n        return (\n            <div className=\"app\">\n                <h1 className=\"app_title\">TODO APP made by Dorota Kora</h1>\n                <div className={\"app_buttons\"}>\n                    <button className=\"app_buttons-add\" onClick={this.addTask}>Add</button>\n                    <button className=\"app_buttons-remove\" onClick={this.removeTask}>Remove</button>\n                    <button className=\"app_buttons-clear\" onClick={this.clearTasks}>Clear</button>\n                </div>\n                <TaskList className=\"app_tasks\" tasks={this.state.tasks}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}